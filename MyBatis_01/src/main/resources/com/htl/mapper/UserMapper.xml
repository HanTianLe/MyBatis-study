<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.htl.mapper.UserMapper">

    <!-- 配置查询结果的列名和实体类的属性的映射关系 -->
    <resultMap id="userMap" type="user2">
        <!-- 主键字段的对应 -->
        <id property="userId" column="id"/>
        <!-- 非主键字段的对应 -->
        <result property="userName" column="username"/>
        <result property="userAddress" column="address"/>
        <result property="userSex" column="sex"/>
        <result property="userBirthday" column="birthday"/>
    </resultMap>

    <!-- 查询所有用户 -->
    <select id="findAll" resultType="user">
        select * from user
    </select>

    <!-- 保存用户 -->
    <insert id="saveUser" parameterType="user">
        <!-- 配置插入操作后，获取插入数据的id -->
        <selectKey keyColumn="id" keyProperty="id" resultType="int" order="AFTER">
            <!-- keyColum对应数据表，keyProperty对于实体类。order="AFTER"表示插入之后执行获取id的操作。-->
            select last_insert_id()
        </selectKey>
        insert into user(username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address})
    </insert>

    <!-- 更新用户 -->
    <update id="updateUser" parameterType="user">
        update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
    </update>

    <!-- 删除用户（根据用户id）-->
    <delete id="deleteUser" parameterType="int">
        delete from user where id=#{uid}
    </delete>

    <!-- 根据用户id查询用户 -->
    <select id="findById" parameterType="int" resultType="user">
        select * from user where id=#{uid}
    </select>

    <!-- 根据名称模糊查询用户 -->
    <select id="findByName" parameterType="string" resultType="user">
        select * from user where username like #{username} <!-- PreparedStatement的参数占位符（这个更好！） -->
    </select>

    <!-- 根据名称模糊查询用户（方法2）-->
    <select id="findByName2" parameterType="string" resultType="user">
        select * from user where username like '%${value}%' <!-- Statement对象的字符串拼接SQL（了解就行） -->
    </select>

    <!-- 获取用户的总记录条数  -->
    <select id="findTotal" resultType="int">
        select count(id) from user
    </select>

    <!-- 根据queryVo中的条件查询用户 -->
    <select id="findUserByVo" parameterType="queryVo" resultType="user">
        select * from user where username like #{user.username}
    </select>

    <!-- 实体类属性与数据库列名不对应2种解决方式 -->
    <!-- 方法1 -->
    <select id="findAll2" resultType="user2">
        <!-- 运行效率高，开发效率低 -->
        select id as userId,username as userName,address as userAddress,sex as userSex,birthday as userBirthday from user
    </select>
    <!-- 方法2 -->
    <select id="findAll3" resultMap="userMap">
        <!-- resultMap="userMap"表示引用在最上面定义的映射关系 -->
        <!-- 运行效率低，开发效率高 -->
        select * from user
    </select>

</mapper>
